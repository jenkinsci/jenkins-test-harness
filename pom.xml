<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License

Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.jenkins-ci</groupId>
    <artifactId>jenkins</artifactId>
    <version>1.85</version>
    <relativePath />
  </parent>

  <groupId>org.jenkins-ci.main</groupId>
  <artifactId>jenkins-test-harness</artifactId>
  <version>${changelist}</version>

  <name>Test harness for Jenkins and plugins</name>
  <description>Harness used to run functional tests of Jenkins core and plugins.</description>
  <url>https://github.com/jenkinsci/${project.artifactId}</url>

  <licenses>
    <license>
      <name>MIT</name>
      <url>http://opensource.org/licenses/MIT</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:https://github.com/${gitHubRepo}.git</connection>
    <developerConnection>scm:git:git@github.com:${gitHubRepo}.git</developerConnection>
    <tag>${scmTag}</tag>
    <url>https://github.com/${gitHubRepo}</url>
  </scm>

  <properties>
    <changelist>999999-SNAPSHOT</changelist>
    <jenkins.version>2.249</jenkins.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <jetty.version>9.4.48.v20220622</jetty.version>
    <hamcrest.version>2.2</hamcrest.version>
    <jmh.version>1.35</jmh.version>
    <gitHubRepo>jenkinsci/${project.artifactId}</gitHubRepo>

    <!-- may use e.g. 2C for 2 Ã— (number of cores) -->
    <concurrency>1</concurrency>

    <spotbugs.excludeFilterFile>${project.basedir}/src/spotbugs/excludesFilter.xml</spotbugs.excludeFilterFile>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.jenkins-ci</groupId>
        <artifactId>annotation-indexer</artifactId>
        <version>1.16</version>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.9.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.kohsuke</groupId>
        <artifactId>access-modifier-annotation</artifactId>
        <version>1.27</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.jenkins-ci.main</groupId>
      <artifactId>jenkins-war</artifactId>
      <version>${jenkins.version}</version>
      <type>executable-war</type>
      <!--
        To ensure consistent set of core artifacts are used, force the users to declare
        a dependency to war
      -->
      <optional>true</optional>
      <exclusions>
        <exclusion>
          <groupId>org.jenkins-ci.modules</groupId>
          <artifactId>sshd</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>jenkins-test-harness-htmlunit</artifactId>
      <version>106.vc41185ea_3d3d</version>
      <exclusions>
        <exclusion>
          <groupId>commons-io</groupId>
          <artifactId>commons-io</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>io.jenkins.lib</groupId>
      <artifactId>support-log-formatter</artifactId>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-security</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-webapp</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>websocket-api</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <!-- or javax-websocket-server-impl -->
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>websocket-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>${hamcrest.version}</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>${hamcrest.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jvnet.hudson</groupId>
      <artifactId>embedded-rhino-debugger</artifactId>
      <version>1.2</version>
      <exclusions>
        <exclusion>
          <groupId>org.jvnet.hudson</groupId>
          <artifactId>htmlunit-core-js</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.netbeans.modules</groupId>
      <artifactId>org-netbeans-insane</artifactId>
      <version>RELEASE140</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <version>${jmh.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <version>${jmh.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jenkins-ci</groupId>
      <artifactId>test-annotations</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jenkins-ci.plugins</groupId>
      <artifactId>matrix-auth</artifactId>
      <version>1.0.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>4.7.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>repo.jenkins-ci.org</id>
      <url>https://repo.jenkins-ci.org/public/</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>repo.jenkins-ci.org</id>
      <url>https://repo.jenkins-ci.org/public/</url>
    </pluginRepository>
  </pluginRepositories>
  <build>
    <plugins>
      <!-- TODO When the minimum Jenkins baseline is bumped past 2.357, this can be deleted. -->
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>display-info</id>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>[1.8.0,]</version>
                </requireJavaVersion>
                <enforceBytecodeVersion>
                  <maxJdkVersion>1.8</maxJdkVersion>
                </enforceBytecodeVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>extra-plugins</id>
            <goals>
              <goal>copy</goal>
            </goals>
            <phase>process-test-resources</phase>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.jenkins-ci.plugins</groupId>
                  <artifactId>structs</artifactId>
                  <version>1.21</version>
                  <type>hpi</type>
                </artifactItem>
              </artifactItems>
              <outputDirectory>${project.build.testOutputDirectory}/plugins</outputDirectory>
              <stripVersion>true</stripVersion>
              <overWriteIfNewer>true</overWriteIfNewer>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <configuration>
          <rules>
            <requireUpperBoundDeps>
              <excludes combine.children="append">
                <!--
                  Stapler requests Guava 14.0 and Jenkins core requests Guice 4.0 which requests
                  Guava 16.0.1. Core actually provides 11.0.1. Work around this mess by just
                  excluding Guava from the RequireUpperBoundDeps check. The long-term fix is
                  tracked in JENKINS-36779.
                -->
                <exclude>com.google.guava:guava</exclude>
              </excludes>
            </requireUpperBoundDeps>
          </rules>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <!-- version specified in grandparent pom -->
        <configuration>
          <argLine>-Xmx256m -Djava.awt.headless=true @{jenkins.insaneHook}</argLine>
          <systemPropertyVariables>
            <hudson.maven.debug>${mavenDebug}</hudson.maven.debug>
            <buildDirectory>${project.build.directory}</buildDirectory>
          </systemPropertyVariables>
          <reuseForks>false</reuseForks>
          <forkCount>${concurrency}</forkCount>
          <trimStackTrace>false</trimStackTrace>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>1.13.1</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
            <version>1.10.12</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>preset-packager</id>
            <goals>
              <goal>execute</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <scripts>
                <script>file:///${pom.basedir}/src/main/preset-data/package.groovy</script>
              </scripts>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jenkins-ci.tools</groupId>
        <artifactId>maven-hpi-plugin</artifactId>
        <extensions>true</extensions>
      </plugin>
      <plugin>
        <groupId>org.kohsuke.stapler</groupId>
        <artifactId>maven-stapler-plugin</artifactId>
        <!-- version specified in grandparent pom -->
        <extensions>true</extensions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>jdk-9-and-above</id>
      <!-- TODO When the minimum Jenkins baseline is bumped past 2.357, this can be lifted out of the profile. -->
      <activation>
        <jdk>[9,)</jdk>
      </activation>
      <properties>
        <jenkins.insaneHook>--patch-module=java.base=${project.build.outputDirectory}/netbeans/harness/modules/ext/org-netbeans-insane-hook.jar --add-exports=java.base/org.netbeans.insane.hook=ALL-UNNAMED</jenkins.insaneHook>
      </properties>
      <!-- TODO When the minimum Jenkins baseline is bumped past 2.357, this can be deleted. -->
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <release>8</release>
              <testRelease>8</testRelease>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-javadoc-plugin</artifactId>
            <configuration>
              <release>8</release>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- TODO When the minimum Jenkins baseline is bumped past 2.357, this can be deleted. -->
    <profile>
      <id>jdk-8-and-below</id>
      <activation>
        <jdk>(,1.8]</jdk>
      </activation>
      <properties>
        <jenkins.insaneHook>-Xbootclasspath/p:${project.build.outputDirectory}/netbeans/harness/modules/ext/org-netbeans-insane-hook.jar</jenkins.insaneHook>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <source>1.8</source>
              <target>1.8</target>
              <testSource>1.8</testSource>
              <testTarget>1.8</testTarget>
              <release combine.self="override" />
              <testRelease combine.self="override" />
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-javadoc-plugin</artifactId>
            <configuration>
              <source>1.8</source>
              <release combine.self="override" />
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>skip-tests-on-release</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <skipTests>true</skipTests>
      </properties>
    </profile>
    <profile>
      <id>rerunFailingTests</id>
      <activation>
        <property>
          <name>!test</name>
        </property>
      </activation>
      <properties>
        <surefire.rerunFailingTestsCount>4</surefire.rerunFailingTestsCount>
      </properties>
    </profile>
    <profile>
      <id>resource-constrained</id>
      <activation>
        <jdk>[9,)</jdk>
        <os>
          <family>Windows</family>
        </os>
        <property>
          <name>env.CI</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <!-- TODO hangs on CI on Windows for inscrutable reasons -->
              <excludes>
                <exclude>org.jvnet.hudson.test.MemoryAssertTest</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!--
      Our Jenkinsfile has a Java 17 branch that tests a recent weekly release for two reasons:

        1. We want to test on all versions of Java, but only recent weeklies support Java 17.

        2. Testing against a recent weekly release ensures that the test harness can be compiled
           against the latest core APIs.

      When we are testing against a recent weekly that requires Java 11, the bytecode version
      check naturally fails. To work around this, we relax the bytecode version check
      when we are executing the Java 17 branch in the CI environment.

      TODO When the minimum Jenkins baseline is bumped past 2.357, this can be deleted.
    -->
    <profile>
      <id>test-recent-cores-on-ci</id>
      <activation>
        <jdk>17</jdk>
        <property>
          <name>env.CI</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>display-info</id>
                <configuration>
                  <rules>
                    <enforceBytecodeVersion>
                      <maxJdkVersion>11</maxJdkVersion>
                    </enforceBytecodeVersion>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
