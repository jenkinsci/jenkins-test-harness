/*
 * The MIT License
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.jvnet.hudson.test;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import hudson.PluginManager.FailedPlugin;
import hudson.PluginWrapper;
import hudson.cli.CLICommand;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import jenkins.model.Jenkins;
import org.junit.jupiter.api.DynamicContainer;
import org.junit.jupiter.api.DynamicNode;
import org.junit.jupiter.api.DynamicTest;

/**
 * Called by the code generated by maven-hpi-plugin to build tests for plugins.
 *
 * @author Kohsuke Kawaguchi
 */
public class PluginAutomaticTestBuilder {

    /**
     * @param params Various information about the plugin that maven-hpi-plugin adds.
     *               As of 1.119, this includes the followings:
     *               <p>
     *               basedir (String) : directory that contains pom.xml
     *               artifactId (String) : artifact ID from the pom.xml
     *               packaging (String) : packaging of from the pom.xml (used to determine if the pom is a plugin or not)
     *               outputDirectory (String) : target/classes dir where class files and resources can be found
     *               testOutputDirectory (String) : target/test-classes.
     *               requirePI (String) : either {@code true} to verify that all the jelly scripts have the Jelly XSS PI in
     *               them or {@code false} to ignore any missing ones.
     */
    public static List<DynamicNode> build(Map<String, ?> params) throws Exception {
        List<DynamicNode> nodes = new ArrayList<>();

        if (params.containsKey("outputDirectory")) {
            File outputDirectory = new File((String) params.get("outputDirectory"));
            boolean requirePi = toBoolean(params.get("requirePI"));

            nodes.add(JellyTestSuiteBuilder.build(outputDirectory, requirePi));

            nodes.add(DynamicContainer.dynamicContainer(
                    "Other Tests",
                    List.of(
                            DynamicTest.dynamicTest("testCliSanity", () -> new OtherTests(params).testCliSanity()),
                            DynamicTest.dynamicTest(
                                    "testPluginActive", () -> new OtherTests(params).testPluginActive()))));

            nodes.add(PropertiesTestSuite.build(outputDirectory));
        }

        return nodes;
    }

    private static boolean toBoolean(Object object) {
        if (object == null) {
            return false;
        }
        if (object instanceof Boolean bool) {
            return bool;
        }
        return Boolean.parseBoolean(object.toString());
    }

    private static class OtherTests {

        private final Map<String, ?> params;

        public OtherTests(Map<String, ?> params) {
            this.params = params;
        }

        void testCliSanity() {
            CLICommand.clone("help");
        }

        void testPluginActive() throws Exception {
            HudsonTestCase h = new HudsonTestCase("OtherTests#testPluginActive") {};

            h.setUp();

            String plugin = (String) params.get("artifactId");
            if (plugin != null) {
                for (FailedPlugin fp : Jenkins.get().getPluginManager().getFailedPlugins()) {
                    fail("While testing " + plugin + ", " + fp.name + " failed to start", fp.cause);
                }

                PluginWrapper pw = Jenkins.get().getPluginManager().getPlugin(plugin);

                assertNotNull(pw, plugin + " failed to start");
                assertTrue(pw.isActive(), plugin + " was not active");
            }

            h.tearDown();
        }
    }
}
